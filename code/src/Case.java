import java.util.ArrayList;

/**
* Holds part of p3p policy, a bit with data type (primary value), recipient, retention, purpose, and a distance function
*
*/


/**
 * Case class
 * containing the unique key data and arrays of Recipient Purpose and Retention
 * with corresponding get and set methods
 * @version 160911.1
 * @author Dimitry Kongevold (dimitryk) & Neshahavan Karunakran
 */

class Case{
	private String data;
	private ArrayList<Recipient> recip;
	private ArrayList<Purpose> purp;
	private ArrayList<Retention> ret;
	

	/**
	 * Paragraph laying out constructor details, etc. 
	 * Constructor can be auto-generated by Source->Generate Constructor...
	 * instantiates the ArrayLists recip, purp, and ret 
	 * 
	 * @author dimitryk & nesha
	 * 
	 * @param String name saves the data key
	 * 
	 * 
	 */

	Case(String name){
		recip = new ArrayList<Recipient>();
		purp = new ArrayList<Purpose>();
		ret = new ArrayList<Retention>();
		data = name;
	}
	/**
	 * adds a single Recipient to the ArrayList recip.
	 * 
	 * @author dimitryk & nesha
	 * @param newRecip Recipient
	 */
	
	
	public void addRecip(Recipient newRecip){
		recip.add(newRecip);
	}
	
	/**
	 * adds a several Recipients to the ArrayList recip.
	 * 
	 * @author dimitryk & nesha
	 * @param  newRecip ArrayList of Recipient
	 */
	
	public void addRecip(ArrayList<Recipient> newRecip){
		recip.addAll(newRecip);
	}
	
	/**
	 * returns this.recip ArrayList
	 * @author dimitryk & nesha
	 * @return this.recip
	 */
	
	public ArrayList<Recipient> getRecip(){
		return recip;
	}
	
	/**
	 * returns this.recip[i]
	 * @author dimitryk & nesha
	 * @param i input int
	 * @return Recipient
	 */
	
	public Recipient getRecip(int i){
		if(i>0&&i<recip.size()){
			return recip.get(i);
		}
		else return null;
			//throw new OutOfBoundsException();    //this we need to think about
	}
	
	/**
	 * adds a single Purpose to the  ArrayList purp.
	 * 
	 * @author dimitryk & nesha
	 * @param newPurp Purpose
	 */
	
	public void addPurp(Purpose newPurp){
		purp.add(newPurp);
	}
	/**
	 * adds several Purposes to the ArrayList purp.
	 * @author dimitryk & nesha
	 * @param newPurp ArrayList of Purpose
	 */
	
	public void addPurp(ArrayList<Purpose> newPurp){
		purp.addAll(newPurp);
	}
	/**
	 * 
	 * @author dimitryk & nesha
	 * @param  getPurp ArrayList of Purpose
	 * @return purp Puspose
	 */
	public ArrayList<Purpose> getPurp(){
		return purp;
	}
	/**
	 * returns this.purp[i]
	 * @author dimitryk & nesha
	 * @param i int
	 * @return the Purpose at the i'th position in the ArrayList
	 */
	public Purpose getPurp(int i){
		if(i>0&&i<purp.size()){
			return purp.get(i);
		}
		else return null;
			//throw new OutOfBoundsException();    //this we need to think about
	}
	/**
	 * adds a single Retention to an array.
	 * @author dimitryk & nesha
	 * @param newRet Retention
	 */
	public void addRet(Retention newRet){
		ret.add(newRet);
	}
	/**
	 * adds a array of Retention to an array ret.
	 * @author dimitryk & nesha
	 * @param newRet ArrayList of Retention
	 */
	public void addret(ArrayList<Retention> newRet){
		ret.addAll(newRet);
	}
	/**
	 * 
	 * @author dimitryk & nesha
	 * @param  getRet ArrayList of Retention
	 * @return ret Retention
	 */
	public ArrayList<Retention> getRet(){
		return ret;
	}
	/**
	 * 
	 * @author dimitryk & nesha
	 * @param i int
	 * @return 
	 */
	public Retention getret(int i){
		if(i>0&&i<ret.size()){
			return ret.get(i);
		}
		else return null;
			//throw new OutOfBoundsException();    //this we need to think about
	}
}